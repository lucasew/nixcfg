#!/usr/bin/env bash

# runs the backup for the current node

set -eu -o pipefail

rsyncnet_user=de3163@de3163.rsync.net

TERMUX_NOTIFICATION_ID=termux_backup


function update_status {
  sd source_me notification --id $$ --title Backup --message "$*"
  echo '[*]' "$@" >&2
}

function backup {
  from="$1"; shift
  to="${rsyncnet_user}:$1"; shift

  update_status rsync: "'$from' -> '$to'"
  rsync -avP "${from}" "${to}" "$@"
}

sd quicksync

if sd is riverwood; then
  backup ~/WORKSPACE/CANTGIT/ backup/lucasew/CANTGIT
fi

if sd is phone; then
  backup /sdcard/DCIM/Camera/ backup/lucasew/camera --exclude=.thumbnails
  backup /sdcard/Pictures/ backup/lucasew/pictures --exclude=.thumbnails
  backup /sdcard/Android/media/com.whatsapp/WhatsApp/Media/ backup/lucasew/WhatsApp --exclude=.Links --exclude=.Statuses
  backup /sdcard/Android/media/com.whatsapp/WhatsApp/Backups/ backup/lucasew/WhatsApp
  for database in /sdcard/Android/media/com.whatsapp/WhatsApp/Databases/msgstore.db.crypt*; do
    backup $database  backup/lucasew/WhatsApp
  done

  mkdir -p ~/.cache/backup

  # for appfolder in Tachiyomi RetroArch; do
  #   tar -cvf ~/.cache/backup/$appfolder.tar /sdcard/$appfolder
  #   backup ~/.cache/backup/$appfolder.tar backup/lucasew
  #   rm ~/.cache/backup/$appfolder.tar
  # done

  mkdir -p ~/.cache/backup/termux
  dpkg-query -f '${binary:Package}\n' -W > ~/.cache/backup/termux/packages.txt
  for item in .bashrc .bash_history .config .termux workspace; do
    rsync -avP ~/$item ~/.cache/backup/termux
    tar -cvf ~/.cache/backup/termux.tar ~/.cache/backup/termux
    backup ~/.cache/backup/termux.tar backup/lucasew
    rm ~/.cache/backup/termux* -rf
  done
fi

if sd is whiterun; then
  true
  # there is a specific service for this
  # backup /var/backup/postgresql/ backup/lucasew/homelab/postgres
fi

# deleting empty files
ssh "$rsyncnet_user" find backup -size 0 -delete

# mirroring of git repos -- new ones using git clone --mirror
# TODO: is this the right way?
# export GIT_TERMINAL_PROMPT=0
# for repo in $(ssh "$rsyncnet_user" ls git); do
#   echo "[*] Syncando mirror do repo em 'git/$repo'"
#   ssh "$rsyncnet_user" -o SendEnv=GIT_TERMINAL_PROMPT git --git-dir "git/$repo" fetch --all --prune
# done

last_notification_file=$(mktemp)
{
echo Backup finalizado

update_status 'Listando snapshots...'
ssh "$rsyncnet_user" ls .zfs/snapshot | sed 's;custom_;;' | tr '\n' ' '
echo

update_status 'Listando cota...'
ssh "$rsyncnet_user" quota

} | tee $last_notification_file

update_status "$(cat $last_notification_file)"
rm $last_notification_file

