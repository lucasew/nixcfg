#!/usr/bin/env python3
#!/usr/bin/env bash


# sends the workspace to the next monitor

import subprocess
import json
import time
import os

rpc = 'swaymsg' if 'WAYLAND_DISPLAY' in os.environ else 'i3-msg'

res = subprocess.run([rpc, '-t', 'get_workspaces'], stdout=subprocess.PIPE)
workspaces = json.loads(res.stdout.decode('utf-8'))
focused_workspace = None
for workspace in workspaces:
    if workspace['focused']:
        focused_workspace = workspace['name']
assert focused_workspace is not None

res = subprocess.run([rpc, '-t', 'get_outputs'], stdout=subprocess.PIPE)
screen_data = json.loads(res.stdout.decode('utf-8'))

screens = []
workspace_screens = {}
for screen in screen_data:
    if screen['current_workspace'] is not None:
        screens.append(screen['name'])
        workspace_screens[screen['name']] = screen['current_workspace']

print(screens)
print(workspace_screens)

old_screens = screens.copy()

screens.insert(0, screens.pop(-1))

print(screens)
print(workspace_screens)

for (from_screen, to_screen) in zip(old_screens, screens):
    subprocess.run([rpc, "workspace", "number", workspace_screens[from_screen]])
    time.sleep(0.1)
    subprocess.run([rpc, "move", "workspace", 'to', 'output', to_screen])
    time.sleep(0.1)

for ws in workspace_screens.values():
    subprocess.run([rpc, "workspace", "number", ws])
    time.sleep(0.1)
    
subprocess.run([rpc, "workspace", "number", focused_workspace])
